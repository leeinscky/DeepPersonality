#!/bin/bash
#!
#! Example SLURM job script for Wilkes3 (AMD EPYC 7763, ConnectX-6, A100)
#! Last updated: Fri 30 Jul 11:07:58 BST 2021
#!

#!#############################################################
#!#### Modify the options in this section as appropriate ######
#!#############################################################

#! sbatch directives begin here ###############################
#! Name of the job:
#SBATCH -J gpujob
#! Which project should be charged (NB Wilkes2 projects end in '-GPU'):
#SBATCH -A GUNES-SL3-GPU
#! How many whole nodes should be allocated?
#SBATCH --nodes=1
#! How many (MPI) tasks will there be in total?
#! Note probably this should not exceed the total number of GPUs in use.
#SBATCH --ntasks=1
#! Specify the number of GPUs per node (between 1 and 4; must be 4 if nodes>1).
#! Note that the job submission script will enforce no more than 32 cpus per GPU.
#SBATCH --gres=gpu:1
#! How much wallclock time will be required?
#SBATCH --time=06:10:00
#! What types of email messages do you wish to receive?
#SBATCH --mail-type=NONE
#! Uncomment this to prevent the job from being requeued (e.g. if
#! interrupted by node failure or system downtime):
##SBATCH --no-requeue

#SBATCH --output=slurm_log/gpu/backup/slurm-%j.%x
#SBATCH --error=slurm_log/gpu/backup/slurm-%j.%x

#! Do not change:
#SBATCH -p ampere

#! sbatch directives end here (put any additional directives above this line)

#! Notes:
#! Charging is determined by GPU number*walltime. 

#! Number of nodes and tasks per node allocated by SLURM (do not change):
numnodes=$SLURM_JOB_NUM_NODES
numtasks=$SLURM_NTASKS
mpi_tasks_per_node=$(echo "$SLURM_TASKS_PER_NODE" | sed -e  's/^\([0-9][0-9]*\).*$/\1/')
#! ############################################################
#! Modify the settings below to specify the application's environment, location 
#! and launch method:

#! Optionally modify the environment seen by the application
#! (note that SLURM reproduces the environment at submission irrespective of ~/.bashrc):
. /etc/profile.d/modules.sh                # Leave this line (enables the module command)
module purge                               # Removes all modules still loaded
module load rhel8/default-amp              # REQUIRED - loads the basic environment

#! Insert additional module load commands after this line if needed:

#! Full path to application executable: 
application=""

#! Run options for the application:
options=""

#! Work directory (i.e. where the job will run):
workdir="$SLURM_SUBMIT_DIR"  # The value of SLURM_SUBMIT_DIR sets workdir to the directory
                             # in which sbatch is run.

#! Are you using OpenMP (NB this is unrelated to OpenMPI)? If so increase this
#! safe value to no more than 128:
export OMP_NUM_THREADS=1

#! Number of MPI tasks to be started by the application per node and in total (do not change):
np=$[${numnodes}*${mpi_tasks_per_node}]

#! Choose this for a pure shared-memory OpenMP parallel program on a single node:
#! (OMP_NUM_THREADS threads will be created):
CMD="$application $options"

#! Choose this for a MPI code using OpenMPI:
#CMD="mpirun -npernode $mpi_tasks_per_node -np $np $application $options"


#! – Your custom commands to run the program –
echo "==================== Activating conda environment ====================" 

eval "$(conda shell.bash hook)" # https://hpc-discourse.usc.edu/t/conda-activate-error/252
conda activate DeepPersonality

echo "> Python version : $(which python)"

echo "==================== Run program ===================="
cd /home/zl525/code/DeepPersonality/
wandb online
JOBID=$SLURM_JOB_ID

# epoch和SBATCH --time的设置值参考：
    # sample_size=128, batch_size=16时，GPU运行4小时，跑了185个epoch
    # sample_size=48, batch_size=16时，GPU运行1小时44分钟，跑完了200个epoch

# sample_size和batch_size的设置值参考：
    # batch_size=16时，sample_size >= 160时就会OOM爆内存
    # batch_size=12时，sample_size >= 208时就会OOM爆内存
    # batch_size=8时， sample_size >= 256时就会OOM爆内存
    # batch_size=4时， sample_size >= 256时就会OOM爆内存

# experiment-1实验结果较好的参数设置备份，https://wandb.ai/hyllbd-1009694687/DeepPersonality/reports/ResNet-3D-Experiments-Report--VmlldzozNTcyMTIy
    # sample_size=32
    # sample_size2=48
    # sample_size3=64
    # sample_size4=64
    # sample_size5=64
    # sample_size6=144

    # batch_size=16
    # batch_size2=16
    # batch_size3=16
    # batch_size4=8
    # batch_size5=32
    # batch_size6=8

#### **************************** temp test **************************** ####
# model="temp"
# # cfg_file=./config/demo/bimodal_resnet18_udiva_tiny.yaml # UDIVA dataset
# cfg_file=./config/demo/noxi/bimodal_resnet18_noxi_tiny.yaml # NOXI dataset

#### **************************** CNN 视觉 ResNet 3D **************************** ####
# model="Res3D-Visual"
# # # cfg_file=./config/demo/resnet_3d_udiva_full.yaml     # UDIVA dataset
# cfg_file=./config/demo/noxi/resnet_3d_noxi_full_visual.yaml   # NOXI dataset

#### **************************** CNN 音频 ResNet18 ***************** ####
# model="Res18-Audio"
# # cfg_file=./config/demo/bimodal_resnet18_udiva_full.yaml
# cfg_file=./config/demo/noxi/resnet18_noxi_full_audio.yaml

#### **************************** CNN 音频+视觉融合 ***************** ####
# model="Res18-AudioVisual"
# # cfg_file=./config/demo/bimodal_resnet18_udiva_full.yaml
# cfg_file=./config/demo/noxi/resnet18_noxi_full_audiovisual.yaml

#### **************************** 视觉Transformer **************************** ####
# model="Transformer-Visual"
# # cfg_file=./config/demo/transformer_udiva.yaml          # UDIVA dataset
# cfg_file=./config/demo/noxi/transformer_noxi_visual.yaml # NoXi dataset

#### **************************** 音频Transformer **************************** ####
# model="AST_Pretrain"
# cfg_file=./config/demo/ssast_pretrain_udiva.yaml # 预训练

# model="AST_Finetune"
# # cfg_file=./config/demo/ssast_finetune_udiva.yaml   # 微调
# cfg_file=./config/demo/noxi/transformer_noxi_audio_finetune.yaml   # 微调

#### **************************** GNN 视觉 **************************** ####
# model="GNN-Visual"
# cfg_file=./config/demo/noxi/gnn_noxi_full_visual.yaml

#### **************************** GNN 音频 **************************** ####
# model="GNN-Audio"
# cfg_file=./config/demo/noxi/gnn_noxi_full_audio.yaml

#### **************************** GNN 音频+视觉融合 **************************** ####
model="GNN-AudioVisual"
# cfg_file=./config/demo/noxi/gnn_noxi_full_audiovisual.yaml
cfg_file=./config/demo/udiva/gnn_udiva_full_audiovisual.yaml

data_dir='udiva'
data="UDIVA"
# data_dir='noxi'
# data="NoXi"

epoch=8

batch_size=8
sample_size=16

num_workers=2
prefetch_factor=5
max_split_size_mb=32
# num_fold=3

# batch_size2=128
# batch_size3=128
# batch_size4=64
# batch_size5=64
# batch_size6=64

# sample_size2=272
# sample_size3=288
# sample_size4=304
# sample_size5=320
# sample_size6=336

learning_rate=0.0005
# learning_rate2=0.0005
# learning_rate3=0.0005
# learning_rate4=0.0005
# learning_rate5=0.0005
# learning_rate6=0.0005

srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size --max_epoch $epoch --bs $batch_size --lr $learning_rate --num_workers $num_workers --prefetch_factor $prefetch_factor --num_fold $num_fold --max_split_size_mb $max_split_size_mb > ./leenote/slurm_log/gpu/${data_dir}/${model}/slurm-${JOBID}_${data}_${model}_bs${batch_size}_sp${sample_size}_ep${epoch}_`date +'%m-%d-%H:%M:%S'`.log 2>&1 &
# srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size2 --max_epoch $epoch --bs $batch_size2 --lr $learning_rate2 > ./leenote/slurm_log/gpu/slurm-${JOBID}_${data}_${model}_sp${sample_size2}_bs${batch_size2}_`date +'%m-%d-%H:%M:%S'`.log 2>&1 &
# srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size3 --max_epoch $epoch --bs $batch_size3 --lr $learning_rate3 > ./leenote/slurm_log/gpu/slurm-${JOBID}_${data}_${model}_sp${sample_size3}_bs${batch_size3}_`date +'%m-%d-%H:%M:%S'`.log 2>&1 &
# srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size4 --max_epoch $epoch --bs $batch_size4 --lr $learning_rate4 > ./leenote/slurm_log/gpu/slurm-${JOBID}_${data}_${model}_sp${sample_size4}_bs${batch_size4}_`date +'%m-%d-%H:%M:%S'`.log 2>&1 &
# srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size5 --max_epoch $epoch --bs $batch_size5 --lr $learning_rate5 > ./leenote/slurm_log/gpu/slurm-${JOBID}_${data}_${model}_sp${sample_size5}_bs${batch_size5}_`date +'%m-%d-%H:%M:%S'`.log 2>&1 &
# srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size6 --max_epoch $epoch --bs $batch_size6 --lr $learning_rate6 > ./leenote/slurm_log/gpu/slurm-${JOBID}_${data}_${model}_sp${sample_size6}_bs${batch_size6}_`date +'%m-%d-%H:%M:%S'`.log 2>&1 &
wait

###############################################################
### You should not have to change anything below this line ####
###############################################################

cd $workdir
echo -e "Changed directory to `pwd`.\n"

JOBID=$SLURM_JOB_ID

echo -e "JobID: $JOBID\n======"
echo "Time: `date`"
echo "Running on master node: `hostname`"
echo "Current directory: `pwd`"

if [ "$SLURM_JOB_NODELIST" ]; then
        #! Create a machine file:
        export NODEFILE=`generate_pbs_nodefile`
        # cat $NODEFILE | uniq > machine.file.$JOBID
        echo -e "\nNodes allocated:\n================"
        echo `cat machine.file.$JOBID | sed -e 's/\..*$//g'`
fi

echo -e "\nnumtasks=$numtasks, numnodes=$numnodes, mpi_tasks_per_node=$mpi_tasks_per_node (OMP_NUM_THREADS=$OMP_NUM_THREADS)"

echo -e "\nExecuting command:\n==================\n$CMD\n"

eval $CMD


# 1. UDIVA
    # ResNet 3D: 14800293 14800328 14800348 14826735 14826745 14826755 14826840
    # ViViT: 14716832 14729675 14729707
    # ResNet 3D, 2023年2月24日22:13, experiment-2: 14919003 14919037 14919038 14919047 14919056 14919057
    # ResNet18, 
        # experiment-3: 14956420 14956425 14956433 14956435 14956438 14956441 14970054(5mins test, success✅)
        # 16497481
    # timesformer_udiva, experiment-4: 10mins test: 14976665; 5h: 1-14976675, 2-14976697, 3-14977044, 4-14977045, 5-14977046, 6-14977049

# 2. NoXi
    # ResNet 3D: 
        # 30mins test: 16866524(bs32 sp128)  16866527(bs64 sp128)
        # 2h: 16869724(bs16 sp16) 16869728(bs32 sp16) 16869731(bs32 sp32) 16869736(bs16 sp64) 16869742(bs32 sp64)
        # 5h: 16869680(bs48 sp16) 16869690(bs32 sp32) 16869692(bs32 sp64) 16869696(bs16 sp64)
    # GNN:
        # 30mins: 18740415
        # 18740859
        # SL3 test: 18880358


### Things to check before submitting job:
    # 1. train batch size, val batch size, test batch size
    # 2. BIMODAL_OPTION, SAVED_MODEL_DIR
### To submit this script to the queue, you can use the command
### cd /home/zl525/code/DeepPersonality/leenote && sbatch slurm_submit_gpu

# 分析job
    # sacct -j 18880358 --format=JobID,Start,End,Elapsed,REQCPUS,ALLOCTRES%30;
    # scontrol show job 18880358

