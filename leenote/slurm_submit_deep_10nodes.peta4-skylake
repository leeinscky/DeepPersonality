#!/bin/bash
#!
#! Example SLURM job script for Peta4-Skylake (Skylake CPUs, OPA)
#! Last updated: Mon 13 Nov 12:25:17 GMT 2017
#!

#!#############################################################
#!#### Modify the options in this section as appropriate ######
#!#############################################################

#! sbatch directives begin here ###############################
#! Name of the job:
#SBATCH -J cpujob
#! Which project should be charged:
#SBATCH -A COMPUTERLAB-SL3-CPU
#! How many whole nodes should be allocated?
#SBATCH --nodes=10
#! How many (MPI) tasks will there be in total? (<= nodes*32)
#! The skylake/skylake-himem nodes have 32 CPUs (cores) each.
#SBATCH --ntasks=320
#! How much wallclock time will be required?
#SBATCH --time=12:00:00
#! What types of email messages do you wish to receive?
#SBATCH --mail-type=NONE
#! Uncomment this to prevent the job from being requeued (e.g. if
#! interrupted by node failure or system downtime):
##SBATCH --no-requeue

#! For 6GB per CPU, set "-p skylake"; for 12GB per CPU, set "-p skylake-himem": 
#SBATCH -p skylake

#! sbatch directives end here (put any additional directives above this line)

#! Notes:
#! Charging is determined by core number*walltime.
#! The --ntasks value refers to the number of tasks to be launched by SLURM only. This
#! usually equates to the number of MPI tasks launched. Reduce this from nodes*32 if
#! demanded by memory requirements, or if OMP_NUM_THREADS>1.
#! Each task is allocated 1 core by default, and each core is allocated 5980MB (skylake)
#! and 12030MB (skylake-himem). If this is insufficient, also specify
#! --cpus-per-task and/or --mem (the latter specifies MB per node).

#! Number of nodes and tasks per node allocated by SLURM (do not change):
numnodes=$SLURM_JOB_NUM_NODES
numtasks=$SLURM_NTASKS
mpi_tasks_per_node=$(echo "$SLURM_TASKS_PER_NODE" | sed -e  's/^\([0-9][0-9]*\).*$/\1/')
#! ############################################################
#! Modify the settings below to specify the application's environment, location 
#! and launch method:

#! Optionally modify the environment seen by the application
#! (note that SLURM reproduces the environment at submission irrespective of ~/.bashrc):
. /etc/profile.d/modules.sh                # Leave this line (enables the module command)
module purge                               # Removes all modules still loaded
module load rhel7/default-peta4            # REQUIRED - loads the basic environment

#! Insert additional module load commands after this line if needed:

#! Full path to application executable: 
application=""

#! Run options for the application:
options=""

#! Work directory (i.e. where the job will run):
workdir="$SLURM_SUBMIT_DIR"  # The value of SLURM_SUBMIT_DIR sets workdir to the directory
                             # in which sbatch is run.

#! Are you using OpenMP (NB this is unrelated to OpenMPI)? If so increase this
#! safe value to no more than 32:
export OMP_NUM_THREADS=1

#! Number of MPI tasks to be started by the application per node and in total (do not change):
np=$[${numnodes}*${mpi_tasks_per_node}]

#! The following variables define a sensible pinning strategy for Intel MPI tasks -
#! this should be suitable for both pure MPI and hybrid MPI/OpenMP jobs:
export I_MPI_PIN_DOMAIN=omp:compact # Domains are $OMP_NUM_THREADS cores in size
export I_MPI_PIN_ORDER=scatter # Adjacent domains have minimal sharing of caches/sockets
#! Notes:
#! 1. These variables influence Intel MPI only.
#! 2. Domains are non-overlapping sets of cores which map 1-1 to MPI tasks.
#! 3. I_MPI_PIN_PROCESSOR_LIST is ignored if I_MPI_PIN_DOMAIN is set.
#! 4. If MPI tasks perform better when sharing caches/sockets, try I_MPI_PIN_ORDER=compact.


#! Uncomment one choice for CMD below (add mpirun/mpiexec options if necessary):

#! Choose this for a MPI code (possibly using OpenMP) using Intel MPI.
CMD="mpirun -ppn $mpi_tasks_per_node -np $np $application $options"

#! Choose this for a pure shared-memory OpenMP parallel program on a single node:
#! (OMP_NUM_THREADS threads will be created):
#CMD="$application $options"

#! Choose this for a MPI code (possibly using OpenMP) using OpenMPI:
#CMD="mpirun -npernode $mpi_tasks_per_node -np $np $application $options"


#! – Your custom commands to run the program –
echo "==================== Activating conda environment ====================" 

eval "$(conda shell.bash hook)" # https://hpc-discourse.usc.edu/t/conda-activate-error/252
conda activate DeepPersonality

echo "> Python version : $(which python)"

echo "==================== Run program ===================="
#### 并行执行多个脚本
cd /home/zl525/code/DeepPersonality/
JOBID=$SLURM_JOB_ID

#### ==================== transformer ViViT: transformer_udiva.yaml ==================== ####
cfg_file=./config/demo/transformer_udiva.yaml
epoch=300

sample_size=96
sample_size2=112
sample_size3=128
sample_size4=144
sample_size5=160
sample_size6=176
sample_size7=192
sample_size8=208
sample_size9=224
sample_size10=240

batch_size=16
batch_size2=16
batch_size3=16
batch_size4=16
batch_size5=16
batch_size6=16
batch_size7=16
batch_size8=16
batch_size9=16
batch_size10=16

learning_rate=0.0005
learning_rate2=0.0005
learning_rate3=0.0005
learning_rate4=0.0005
learning_rate5=0.0005
learning_rate6=0.0005
learning_rate7=0.0005
learning_rate8=0.0005
learning_rate9=0.0005
learning_rate10=0.0005

srun --nodes=1 --ntasks=32 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size --max_epoch $epoch --bs $batch_size --lr $learning_rate > ./leenote/slurm_log/cpu/slurm-${JOBID}_T_${sample_size}_${batch_size}.log 2>&1 &
srun --nodes=1 --ntasks=32 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size2 --max_epoch $epoch --bs $batch_size2 --lr $learning_rate2 > ./leenote/slurm_log/cpu/slurm-${JOBID}_T_${sample_size2}_${batch_size2}.log 2>&1 &
srun --nodes=1 --ntasks=32 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size3 --max_epoch $epoch --bs $batch_size3 --lr $learning_rate3 > ./leenote/slurm_log/cpu/slurm-${JOBID}_T_${sample_size3}_${batch_size3}.log 2>&1 &
srun --nodes=1 --ntasks=32 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size4 --max_epoch $epoch --bs $batch_size4 --lr $learning_rate4 > ./leenote/slurm_log/cpu/slurm-${JOBID}_T_${sample_size4}_${batch_size4}.log 2>&1 &
srun --nodes=1 --ntasks=32 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size5 --max_epoch $epoch --bs $batch_size5 --lr $learning_rate5 > ./leenote/slurm_log/cpu/slurm-${JOBID}_T_${sample_size5}_${batch_size5}.log 2>&1 &
srun --nodes=1 --ntasks=32 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size6 --max_epoch $epoch --bs $batch_size6 --lr $learning_rate6 > ./leenote/slurm_log/cpu/slurm-${JOBID}_T_${sample_size6}_${batch_size6}.log 2>&1 &

srun --nodes=1 --ntasks=32 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size7 --max_epoch $epoch --bs $batch_size7 --lr $learning_rate7 > ./leenote/slurm_log/cpu/slurm-${JOBID}_T_${sample_size7}_${batch_size7}.log 2>&1 &
srun --nodes=1 --ntasks=32 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size8 --max_epoch $epoch --bs $batch_size8 --lr $learning_rate8 > ./leenote/slurm_log/cpu/slurm-${JOBID}_T_${sample_size8}_${batch_size8}.log 2>&1 &
srun --nodes=1 --ntasks=32 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size9 --max_epoch $epoch --bs $batch_size9 --lr $learning_rate9 > ./leenote/slurm_log/cpu/slurm-${JOBID}_T_${sample_size9}_${batch_size9}.log 2>&1 &
srun --nodes=1 --ntasks=32 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size10 --max_epoch $epoch --bs $batch_size10 --lr $learning_rate10 > ./leenote/slurm_log/cpu/slurm-${JOBID}_T_${sample_size10}_${batch_size10}.log 2>&1 &

wait


###############################################################
### You should not have to change anything below this line ####
###############################################################

cd $workdir
echo -e "Changed directory to `pwd`.\n"

JOBID=$SLURM_JOB_ID

echo -e "JobID: $JOBID\n======"
echo "Time: `date`"
echo "Running on master node: `hostname`"
echo "Current directory: `pwd`"

if [ "$SLURM_JOB_NODELIST" ]; then
        #! Create a machine file:
        export NODEFILE=`generate_pbs_nodefile`
        cat $NODEFILE | uniq > machine.file.$JOBID
        echo -e "\nNodes allocated:\n================"
        echo `cat machine.file.$JOBID | sed -e 's/\..*$//g'`
fi

echo -e "\nnumtasks=$numtasks, numnodes=$numnodes, mpi_tasks_per_node=$mpi_tasks_per_node (OMP_NUM_THREADS=$OMP_NUM_THREADS)"

echo -e "\nExecuting command:\n==================\n$CMD\n"

eval $CMD 

# cd /home/zl525/code/DeepPersonality/leenote && sbatch slurm_submit_deep_10nodes.peta4-skylake
# ViViT: 14688968 14693953