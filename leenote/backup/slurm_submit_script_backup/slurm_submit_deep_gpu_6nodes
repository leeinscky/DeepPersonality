#!/bin/bash
#!
#! Example SLURM job script for Wilkes3 (AMD EPYC 7763, ConnectX-6, A100)
#! Last updated: Fri 30 Jul 11:07:58 BST 2021
#!

#!#############################################################
#!#### Modify the options in this section as appropriate ######
#!#############################################################

#! sbatch directives begin here ###############################
#! Name of the job:
#SBATCH -J gpujob
#! Which project should be charged (NB Wilkes2 projects end in '-GPU'):
#SBATCH -A COMPUTERLAB-SL3-GPU
#! How many whole nodes should be allocated?
#SBATCH --nodes=6
#! How many (MPI) tasks will there be in total?
#! Note probably this should not exceed the total number of GPUs in use.
#SBATCH --ntasks=6
#! Specify the number of GPUs per node (between 1 and 4; must be 4 if nodes>1).
#! Note that the job submission script will enforce no more than 32 cpus per GPU.
#SBATCH --gres=gpu:4
#! How much wallclock time will be required?
#SBATCH --time=4:00:00
#! What types of email messages do you wish to receive?
#SBATCH --mail-type=NONE
#! Uncomment this to prevent the job from being requeued (e.g. if
#! interrupted by node failure or system downtime):
##SBATCH --no-requeue

#SBATCH --output=slurm_log/slurm-%j.%x.out
#SBATCH --error=slurm_log/slurm-%j.%x.err

#! Do not change:
#SBATCH -p ampere

#! sbatch directives end here (put any additional directives above this line)

#! Notes:
#! Charging is determined by GPU number*walltime. 

#! Number of nodes and tasks per node allocated by SLURM (do not change):
numnodes=$SLURM_JOB_NUM_NODES
numtasks=$SLURM_NTASKS
mpi_tasks_per_node=$(echo "$SLURM_TASKS_PER_NODE" | sed -e  's/^\([0-9][0-9]*\).*$/\1/')
#! ############################################################
#! Modify the settings below to specify the application's environment, location 
#! and launch method:

#! Optionally modify the environment seen by the application
#! (note that SLURM reproduces the environment at submission irrespective of ~/.bashrc):
. /etc/profile.d/modules.sh                # Leave this line (enables the module command)
module purge                               # Removes all modules still loaded
module load rhel8/default-amp              # REQUIRED - loads the basic environment

#! Insert additional module load commands after this line if needed:

#! Full path to application executable: 
application=""

#! Run options for the application:
options=""

#! Work directory (i.e. where the job will run):
workdir="$SLURM_SUBMIT_DIR"  # The value of SLURM_SUBMIT_DIR sets workdir to the directory
                             # in which sbatch is run.

#! Are you using OpenMP (NB this is unrelated to OpenMPI)? If so increase this
#! safe value to no more than 128:
export OMP_NUM_THREADS=1

#! Number of MPI tasks to be started by the application per node and in total (do not change):
np=$[${numnodes}*${mpi_tasks_per_node}]

#! Choose this for a pure shared-memory OpenMP parallel program on a single node:
#! (OMP_NUM_THREADS threads will be created):
CMD="$application $options"

#! Choose this for a MPI code using OpenMPI:
#CMD="mpirun -npernode $mpi_tasks_per_node -np $np $application $options"


#! – Your custom commands to run the program –
echo "==================== Activating conda environment ====================" 

eval "$(conda shell.bash hook)" # https://hpc-discourse.usc.edu/t/conda-activate-error/252
conda activate DeepPersonality

echo "> Python version : $(which python)"

echo "==================== Run program ===================="
#### 仅执行一个脚本
# cd /home/zl525/code/DeepPersonality/leenote/
# sh main_slurm_gpu.sh

#### 并行执行多个脚本
cd /home/zl525/code/DeepPersonality/
wandb online
JOBID=$SLURM_JOB_ID

#### ==================== transformer ViViT: transformer_udiva.yaml ==================== ####
cfg_file=./config/demo/transformer_udiva.yaml
epoch=300

sample_size=96
sample_size2=112
sample_size3=128
sample_size4=144
sample_size5=160
sample_size6=176

batch_size=16
batch_size2=16
batch_size3=16
batch_size4=16
batch_size5=16
batch_size6=16

learning_rate=0.0005
learning_rate2=0.0005
learning_rate3=0.0005
learning_rate4=0.0005
learning_rate5=0.0005
learning_rate6=0.0005

srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size --max_epoch $epoch --bs $batch_size --lr $learning_rate > ./leenote/slurm_log/slurm-${JOBID}_T_${sample_size}_${batch_size}.log 2>&1 &
srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size2 --max_epoch $epoch --bs $batch_size2 --lr $learning_rate2 > ./leenote/slurm_log/slurm-${JOBID}_T_${sample_size2}_${batch_size2}.log 2>&1 &
srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size3 --max_epoch $epoch --bs $batch_size3 --lr $learning_rate3 > ./leenote/slurm_log/slurm-${JOBID}_T_${sample_size3}_${batch_size3}.log 2>&1 &
srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size4 --max_epoch $epoch --bs $batch_size4 --lr $learning_rate4 > ./leenote/slurm_log/slurm-${JOBID}_T_${sample_size4}_${batch_size4}.log 2>&1 &
srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size5 --max_epoch $epoch --bs $batch_size5 --lr $learning_rate5 > ./leenote/slurm_log/slurm-${JOBID}_T_${sample_size5}_${batch_size5}.log 2>&1 &
srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size6 --max_epoch $epoch --bs $batch_size6 --lr $learning_rate6 > ./leenote/slurm_log/slurm-${JOBID}_T_${sample_size6}_${batch_size6}.log 2>&1 &
wait


# #### ==================== resnet3D: resnet_3d_udiva_full.yaml ==================== ####
# cfg_file=./config/demo/resnet_3d_udiva_full.yaml
# epoch=300
# # epoch和SBATCH --time的设置值参考：
#     # ResNet3D: sample_size=128, batch_size=16时，GPU运行4小时，跑了185个epoch
#     # ResNet3D: sample_size=48, batch_size=16时，GPU运行1小时44分钟，跑完了200个epoch

# # sample_size和batch_size的设置值参考：
#     # ResNet3D: batch_size=16时，sample_size >= 160时就会OOM爆内存
#     # ResNet3D: batch_size=12时，sample_size >= 208时就会OOM爆内存
#     # ResNet3D: batch_size=8时， sample_size >= 256时就会OOM爆内存
#     # ResNet3D: batch_size=4时， sample_size >= 256时就会OOM爆内存

# sample_size=8
# sample_size2=16
# sample_size3=32
# sample_size4=48
# sample_size5=64
# sample_size6=80

# batch_size=64
# batch_size2=64
# batch_size3=64
# batch_size4=64
# batch_size5=64
# batch_size6=64

# learning_rate=0.0005
# learning_rate2=0.0005
# learning_rate3=0.0005
# learning_rate4=0.0005
# learning_rate5=0.0005
# learning_rate6=0.0005

# srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size --max_epoch $epoch --bs $batch_size --lr $learning_rate > ./leenote/slurm_log/slurm-${JOBID}_${sample_size}_${batch_size}.log 2>&1 &
# srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size2 --max_epoch $epoch --bs $batch_size2 --lr $learning_rate2 > ./leenote/slurm_log/slurm-${JOBID}_${sample_size2}_${batch_size2}.log 2>&1 &
# srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size3 --max_epoch $epoch --bs $batch_size3 --lr $learning_rate3 > ./leenote/slurm_log/slurm-${JOBID}_${sample_size3}_${batch_size3}.log 2>&1 &
# srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size4 --max_epoch $epoch --bs $batch_size4 --lr $learning_rate4 > ./leenote/slurm_log/slurm-${JOBID}_${sample_size4}_${batch_size4}.log 2>&1 &
# srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size5 --max_epoch $epoch --bs $batch_size5 --lr $learning_rate5 > ./leenote/slurm_log/slurm-${JOBID}_${sample_size5}_${batch_size5}.log 2>&1 &
# srun --nodes=1 --ntasks=1 python3 ./script/run_exp.py --cfg_file $cfg_file --sample_size $sample_size6 --max_epoch $epoch --bs $batch_size6 --lr $learning_rate6 > ./leenote/slurm_log/slurm-${JOBID}_${sample_size6}_${batch_size6}.log 2>&1 &
# wait

###############################################################
### You should not have to change anything below this line ####
###############################################################

cd $workdir
echo -e "Changed directory to `pwd`.\n"

JOBID=$SLURM_JOB_ID

echo -e "JobID: $JOBID\n======"
echo "Time: `date`"
echo "Running on master node: `hostname`"
echo "Current directory: `pwd`"

if [ "$SLURM_JOB_NODELIST" ]; then
        #! Create a machine file:
        export NODEFILE=`generate_pbs_nodefile`
        cat $NODEFILE | uniq > machine.file.$JOBID
        echo -e "\nNodes allocated:\n================"
        echo `cat machine.file.$JOBID | sed -e 's/\..*$//g'`
fi

echo -e "\nnumtasks=$numtasks, numnodes=$numnodes, mpi_tasks_per_node=$mpi_tasks_per_node (OMP_NUM_THREADS=$OMP_NUM_THREADS)"

echo -e "\nExecuting command:\n==================\n$CMD\n"

eval $CMD 


### To submit this script to the queue, you can use the command
### cd /home/zl525/code/DeepPersonality/leenote && sbatch slurm_submit_deep_gpu_6nodes
# ResNet-3D: 14583321 14583364 14589749 14590606 14595310
# ViViT: 14715935 (sample 8-80)  14716137 (sample 96-176)